const n=JSON.parse('{"key":"v-32b3e43e","path":"/wiki/210_lua_tricks.html","title":"Lua 的一些小技巧","lang":"zh-CN","frontmatter":{"order":210,"description":"Lua 的一些小技巧 异常处理 异常处理是程序中至关重要的一环，不仅仅保证了程序不会意外中断、丢失数据、造成更大的影响，也能够为运营提供足够的数据来判断问题的出处。 在 Lua 中没有类似 try-catch 或 try-except 之类的语法糖，只给我们提供了 pcall 和 xpcall 两个函数来进行异常处理。 我们可以按照下面的模板来写 Lua 当中的异常处理： if xpcall(function() CallTheFunction(args) end, function(err) HandleError(err) end) then \\t-- do something when everything good else \\t-- do something when something go wrong end","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/wiki/210_lua_tricks.html"}],["meta",{"property":"og:site_name","content":"罗潇阳的博客"}],["meta",{"property":"og:title","content":"Lua 的一些小技巧"}],["meta",{"property":"og:description","content":"Lua 的一些小技巧 异常处理 异常处理是程序中至关重要的一环，不仅仅保证了程序不会意外中断、丢失数据、造成更大的影响，也能够为运营提供足够的数据来判断问题的出处。 在 Lua 中没有类似 try-catch 或 try-except 之类的语法糖，只给我们提供了 pcall 和 xpcall 两个函数来进行异常处理。 我们可以按照下面的模板来写 Lua 当中的异常处理： if xpcall(function() CallTheFunction(args) end, function(err) HandleError(err) end) then \\t-- do something when everything good else \\t-- do something when something go wrong end"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T09:32:11.000Z"}],["meta",{"property":"article:author","content":"CCViolett"}],["meta",{"property":"article:modified_time","content":"2024-07-23T09:32:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lua 的一些小技巧\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-23T09:32:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CCViolett\\",\\"url\\":\\"https://ccviolett.github.io\\"}]}"]]},"headers":[{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]}],"git":{"createdTime":1721727131000,"updatedTime":1721727131000,"contributors":[{"name":"copoluo","email":"copoluo@tencent.com","commits":1}]},"readingTime":{"minutes":0.53,"words":160},"filePathRelative":"wiki/210_lua_tricks.md","localizedDate":"2024年7月23日","excerpt":"<h1> Lua 的一些小技巧</h1>\\n<h2> 异常处理</h2>\\n<p>异常处理是程序中至关重要的一环，不仅仅保证了程序不会意外中断、丢失数据、造成更大的影响，也能够为运营提供足够的数据来判断问题的出处。</p>\\n<p>在 Lua 中没有类似 <code>try-catch</code> 或 <code>try-except</code> 之类的语法糖，只给我们提供了 <code>pcall</code> 和 <code>xpcall</code> 两个函数来进行异常处理。</p>\\n<p>我们可以按照下面的模板来写 Lua 当中的异常处理：</p>\\n<div class=\\"language-lua line-numbers-mode\\" data-ext=\\"lua\\"><pre class=\\"language-lua\\"><code><span class=\\"token keyword\\">if</span> <span class=\\"token function\\">xpcall</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">CallTheFunction</span><span class=\\"token punctuation\\">(</span>args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">end</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">HandleError</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">end</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">then</span>\\n\\t<span class=\\"token comment\\">-- do something when everything good</span>\\n<span class=\\"token keyword\\">else</span>\\n\\t<span class=\\"token comment\\">-- do something when something go wrong</span>\\n<span class=\\"token keyword\\">end</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
