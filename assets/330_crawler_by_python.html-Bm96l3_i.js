import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as r,c as i,a as n,b as s,d as e,f as t}from"./app-CahC9Ikc.js";const c="/blog/assets/企业微信截图_17219745163624-cP80_kG0.png",l={},u=t(`<h1 id="selenium-全能爬虫指南" tabindex="-1"><a class="header-anchor" href="#selenium-全能爬虫指南" aria-hidden="true">#</a> Selenium 全能爬虫指南</h1><h2 id="待整理" tabindex="-1"><a class="header-anchor" href="#待整理" aria-hidden="true">#</a> 待整理</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>url_changes<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置" aria-hidden="true">#</a> 环境配置</h2><h3 id="下载-chrome-和-chrome-driver" tabindex="-1"><a class="header-anchor" href="#下载-chrome-和-chrome-driver" aria-hidden="true">#</a> 下载 Chrome 和 Chrome Driver</h3>`,5),d=n("code",null,"Selenium",-1),k={href:"https://blog.csdn.net/qq_50735685/article/details/137022098",target:"_blank",rel:"noopener noreferrer"},h=n("figure",null,[n("img",{src:c,alt:"博客截图",height:"400",tabindex:"0",loading:"lazy"}),n("figcaption",null,"博客截图")],-1),m={href:"https://googlechromelabs.github.io/chrome-for-testing/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://chromedriver.storage.googleapis.com/index.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>如果发现下载旧版本的 Chrome 也无法运行（如 glibc 版本过低），那么可以从软件源下载可用的 Chrome、Chromium 后，根据下载的版本去找对应的 Chrome Driver（只要大版本对就可以用）。</p><p>随后我们在初始化 <code>Selenium</code> 的时候指定 Chrome 和 Chrome Driver 的路径即可（如果 Chrome 使用的是系统默认的，可以不指定）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>service <span class="token keyword">import</span> Service

opt <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>
opt<span class="token punctuation">.</span>binary_location <span class="token operator">=</span> chrome_path
service <span class="token operator">=</span> Service<span class="token punctuation">(</span>driver_path<span class="token punctuation">)</span>
driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>service<span class="token operator">=</span>service<span class="token punctuation">,</span> options<span class="token operator">=</span>opt<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="功能实现" tabindex="-1"><a class="header-anchor" href="#功能实现" aria-hidden="true">#</a> 功能实现</h2><h3 id="随机-ua" tabindex="-1"><a class="header-anchor" href="#随机-ua" aria-hidden="true">#</a> 随机 UA</h3><p>我们可以通过 <code>fake_useragent</code> 包来实现。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent
ua <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment">#ua.random 表示的时 随机生成一个User-Agent，这样的话我们就能有很多个 User-Agent 来使用，</span>
    <span class="token comment">#就不用再担心 被封ip了。</span>
	<span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> ua<span class="token punctuation">.</span>random<span class="token punctuation">,</span>
  <span class="token string">&quot;Accept&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h4>`,8),_={href:"https://blog.csdn.net/qq_41945828/article/details/105173061",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="截图" tabindex="-1"><a class="header-anchor" href="#截图" aria-hidden="true">#</a> 截图</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> driver<span class="token punctuation">.</span>get_screenshot_as_base64<span class="token punctuation">(</span><span class="token punctuation">)</span>
image <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>image_name<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-cookies" tabindex="-1"><a class="header-anchor" href="#使用-cookies" aria-hidden="true">#</a> 使用 Cookies</h3><p>首先我们要确保 driver 停留在 Cookies 中 domain 所描述的页面上，否则可能会添加失败。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> cookie <span class="token keyword">in</span> cookies<span class="token punctuation">:</span>
    cookie_dict <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;domain&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;.baidu.com&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> cookie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span> cookie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;expires&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;path&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;httpOnly&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
        <span class="token string">&#39;HostOnly&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Secure&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span>
    <span class="token punctuation">}</span>
    driver<span class="token punctuation">.</span>add_cookie<span class="token punctuation">(</span>cookie_dict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取-input-标签类型" tabindex="-1"><a class="header-anchor" href="#获取-input-标签类型" aria-hidden="true">#</a> 获取 input 标签类型</h3><p>可以通过 <code>item.get_attribute(&#39;attribute&#39;)</code> 来获取其 HTML 属性，故我们可以通过 <code>item.get_attribute(&#39;type&#39;)</code>来获取 input 的类型。</p><h2 id="网页内容分析" tabindex="-1"><a class="header-anchor" href="#网页内容分析" aria-hidden="true">#</a> 网页内容分析</h2><p>我们通过 <code>Beautiful Soup</code> 来完成网页内容分析</p><h2 id="网络请求-har-抓取" tabindex="-1"><a class="header-anchor" href="#网络请求-har-抓取" aria-hidden="true">#</a> 网络请求 HAR 抓取</h2><p>我们通过 <code>Browsermob-Proxy</code> 来完成网络请求的抓取。</p>`,11),q={href:"https://www.oracle.com/cn/java/technologies/javase/jdk11-archive-downloads.html",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>随后我们需要通过 <code>pip install browsermob-proxy</code> 安装相关的 Python 包。</p><h3 id="对接细节" tabindex="-1"><a class="header-anchor" href="#对接细节" aria-hidden="true">#</a> 对接细节</h3><p>如果我们想要在 <code>python</code> 的网络请求中，通过 <code>request</code> 利用 BMP 抓取到的 HAR 文件，那么我们有一些东西需要经过转换处理。</p><p>里面有很多东西是不能直接对接到 <code>request</code> 中使用的，headers 和 cookies 需要转换可以比较明显地看出来，但是有一些错误可能非常隐蔽，并且没有文档可以参考。</p><h4 id="application-x-www-form-urlencoded" tabindex="-1"><a class="header-anchor" href="#application-x-www-form-urlencoded" aria-hidden="true">#</a> application/x-www-form-urlencoded</h4><p>格式为 <code>application/x-www-form-urlencoded</code> 格式的 POST 请求，在 HAR 文件中是下面的形式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;pageref&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test_har_470cc100-a475-47e7-867b-75136b30e8a5&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;startedDateTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2024-07-16T11:14:15.111+08:00&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;httpVersion&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HTTP/1.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;cookies&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      ...
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;queryString&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;postData&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;mimeType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test_fe932eb8-85ba-4090-b8f1-6d145225f8de&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test_12b0b5f0-f54f-4aa4-a4a0-dcae121f31c8&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;headersSize&quot;</span><span class="token operator">:</span> <span class="token number">570</span><span class="token punctuation">,</span>
    <span class="token property">&quot;bodySize&quot;</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>
    <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可能以为可以通过其中 <code>postData.params</code> 的数据来发送 <code>requests</code> 请求，但是这是错误的。</p><p>在 <code>requests</code> 中，我们需要转化为 K-V 形式的 <code>dict</code>，才能通过 <code>request.post(url, data=data)</code> 正确发送。</p><h2 id="抛弃-seleinum" tabindex="-1"><a class="header-anchor" href="#抛弃-seleinum" aria-hidden="true">#</a> 抛弃 Seleinum</h2><p>Selenium 存在若干不便利的地方。</p><pre><code>\`undetected_chromedriver\` 替代 Selenium
</code></pre><p>程序需要放在 <code>if __name__ == &#39;__main__&#39;:</code> 当中，否则会遇到 <code>freeze_support</code> 问题。</p><h3 id="参考资料-1" tabindex="-1"><a class="header-anchor" href="#参考资料-1" aria-hidden="true">#</a> 参考资料</h3>`,14),y={href:"https://blog.csdn.net/Scott0902/article/details/127024380",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.csdn.net/shenfuli/article/details/103969964",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"相关资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关资料","aria-hidden":"true"},"#"),s(" 相关资料")],-1),S={href:"https://blog.csdn.net/u010741112/article/details/118674293",target:"_blank",rel:"noopener noreferrer"},C={href:"https://blog.csdn.net/teachskyLY/article/details/85037383",target:"_blank",rel:"noopener noreferrer"},D={href:"https://blog.csdn.net/c_xiazai12345/article/details/120624058",target:"_blank",rel:"noopener noreferrer"},N={href:"https://blog.csdn.net/qq_16519957/article/details/128740502",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.jianshu.com/p/7258ecfc6111",target:"_blank",rel:"noopener noreferrer"},T={href:"https://blog.csdn.net/qq_44315987/article/details/116501955",target:"_blank",rel:"noopener noreferrer"},A={href:"https://blog.csdn.net/qq_53953480/article/details/130509455",target:"_blank",rel:"noopener noreferrer"},j={href:"https://blog.csdn.net/weixin_42521409/article/details/127927149",target:"_blank",rel:"noopener noreferrer"},z={href:"https://cloud.tencent.com/developer/article/1549872",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.cnblogs.com/hls-code/p/16263821.html",target:"_blank",rel:"noopener noreferrer"};function O(E,H){const a=p("ExternalLinkIcon");return r(),i("div",null,[u,n("p",null,[s("虽然新版本的 "),d,s(" 已经可以自动根据 Chrome 版本去下载对应的 Chrome Driver 了，但是这种便利也造成了一些问题，详见 "),n("a",k,[s("解决selenium新版启动缓慢 (卡住) 的问题_selenium chrome速度太慢-CSDN博客"),e(a)]),s("。")]),h,n("p",null,[s("如果没有特殊情况的话，建议直接在 "),n("a",m,[s("Chrome for Testing availability (googlechromelabs.github.io)"),e(a)]),s(" 上下载配套版本的 Chrome 和 Chrome Driver。")]),n("p",null,[s("如果本地的环境比较老旧，无法正常运行最新的 Stable 版本，需要旧版本的，可以去"),n("a",v,[s("chromedriver.storage.googleapis.com/index.html"),e(a)]),s("。")]),b,n("ul",null,[n("li",null,[n("a",_,[s("Python requests模块破解反爬虫_屏蔽 python-requests-CSDN博客"),e(a)])])]),g,n("p",null,[s("BrowsermobProxy 是一个基于 Java11 的服务框架，我们首先要确保我们电脑上安装了 Java11，见 "),n("a",q,[s("Java Archive Downloads - Java SE 11 | Oracle 中国"),e(a)]),s("。")]),f,n("ul",null,[n("li",null,[n("a",y,[s("用undetected_chromedriver代替selenium解决浏览器打不开网页_undetected-chromedriver加载浏览器报错-CSDN博客"),e(a)])]),n("li",null,[n("a",x,[s("PyTorch：The “freeze_support()” line can be omitted if the program is not going to be frozen_the freeze support line-CSDN博客"),e(a)])])]),w,n("ul",null,[n("li",null,[n("a",S,[s("使用python3+selenium+browsermob-proxy-2.1.4 模拟浏览器开发者模式 Network中的抓包_browsermob proxy 下载-CSDN博客"),e(a)])]),n("li",null,[n("a",C,[s("selenium 获取input输入的文本值和获取元素中的文本内容_c# selenium获取input的值-CSDN博客"),e(a)])]),n("li",null,[n("a",D,[s("selenium的八种定位方式之：id、name、tag_name、class_name、link_text、partial_link_text、xpath_selenium name定位-CSDN博客"),e(a)])]),n("li",null,[n("a",N,[s("Python爬虫（1）一次性搞定Selenium(新版)8种find_element元素定位方式_selenium find element-CSDN博客"),e(a)])]),n("li",null,[n("a",P,[s("【自动化】【爬虫】终极方案 = Selenium + browsermob-proxy - 简书 (jianshu.com)"),e(a)])]),n("li",null,[n("a",T,[s("python + selenium + browsermobproxy环境配置-CSDN博客"),e(a)])]),n("li",null,[n("a",A,[s("server.start()出现报错browsermobproxy.exceptions.ProxyServerError_browsermobproxy.exceptions.proxyservererror: the b-CSDN博客"),e(a)])]),n("li",null,[n("a",j,[s("browsermob-proxy使用时常见问题的解决办法-CSDN博客"),e(a)])]),n("li",null,[n("a",z,[s("Selenium爬虫-获取浏览器Network请求和响应-腾讯云开发者社区-腾讯云 (tencent.com)"),e(a)])]),n("li",null,[n("a",B,[s("selenium工具之解决元素不可交互 （element not interactable）/元素被拦截（element click intercepted） - 习久性成 - 博客园 (cnblogs.com)"),e(a)])])])])}const J=o(l,[["render",O],["__file","330_crawler_by_python.html.vue"]]);export{J as default};
