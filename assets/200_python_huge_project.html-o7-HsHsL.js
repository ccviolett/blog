const t=JSON.parse('{"key":"v-30add5e4","path":"/wiki/200_python_huge_project.html","title":"Python 大型项目开发","lang":"zh-CN","frontmatter":{"order":200,"description":"Python 大型项目开发 有一些 Python 的特性，只有当我们真正开发大型 Python 项目的时候，我们才能意识到他的重要性、意识到他存在的意义，而不是像在小型项目中一样只是炫技或者是玩具，比如“闭包”、“多线程”、”类型限制“等。 抽象 在 Python 面向对象编程中，静态函数和类函数不是一个概念。 静态函数装饰器 staticmethod 和抽象接口装饰器 abstractmethod 不能同时作用于同一个函数，但是类函数装饰器 classmethod 和抽象接口装饰器 abstractmethod 可以作用于同一个函数。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/wiki/200_python_huge_project.html"}],["meta",{"property":"og:site_name","content":"罗潇阳的博客"}],["meta",{"property":"og:title","content":"Python 大型项目开发"}],["meta",{"property":"og:description","content":"Python 大型项目开发 有一些 Python 的特性，只有当我们真正开发大型 Python 项目的时候，我们才能意识到他的重要性、意识到他存在的意义，而不是像在小型项目中一样只是炫技或者是玩具，比如“闭包”、“多线程”、”类型限制“等。 抽象 在 Python 面向对象编程中，静态函数和类函数不是一个概念。 静态函数装饰器 staticmethod 和抽象接口装饰器 abstractmethod 不能同时作用于同一个函数，但是类函数装饰器 classmethod 和抽象接口装饰器 abstractmethod 可以作用于同一个函数。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T11:05:57.000Z"}],["meta",{"property":"article:author","content":"CCViolett"}],["meta",{"property":"article:modified_time","content":"2024-07-23T11:05:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 大型项目开发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-23T11:05:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CCViolett\\",\\"url\\":\\"https://ccviolett.github.io\\"}]}"]]},"headers":[{"level":2,"title":"抽象","slug":"抽象","link":"#抽象","children":[]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[{"level":3,"title":"为什么需要闭包？","slug":"为什么需要闭包","link":"#为什么需要闭包","children":[]},{"level":3,"title":"相关资料","slug":"相关资料","link":"#相关资料","children":[]}]},{"level":2,"title":"多线程并发","slug":"多线程并发","link":"#多线程并发","children":[{"level":3,"title":"线程竞争并发示例","slug":"线程竞争并发示例","link":"#线程竞争并发示例","children":[]},{"level":3,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}]},{"level":2,"title":"引用与封装","slug":"引用与封装","link":"#引用与封装","children":[{"level":3,"title":"结果封装","slug":"结果封装","link":"#结果封装","children":[]},{"level":3,"title":"数据传递","slug":"数据传递","link":"#数据传递","children":[]},{"level":3,"title":"对接接口","slug":"对接接口","link":"#对接接口","children":[]}]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[{"level":3,"title":"参考资料","slug":"参考资料-1","link":"#参考资料-1","children":[]}]},{"level":2,"title":"超时限制","slug":"超时限制","link":"#超时限制","children":[{"level":3,"title":"参考资料","slug":"参考资料-2","link":"#参考资料-2","children":[]}]},{"level":2,"title":"解包与 args, kwargs","slug":"解包与-args-kwargs","link":"#解包与-args-kwargs","children":[]}],"git":{"createdTime":1721646850000,"updatedTime":1721732757000,"contributors":[{"name":"copoluo","email":"copoluo@tencent.com","commits":3}]},"readingTime":{"minutes":5.52,"words":1655},"filePathRelative":"wiki/200_python_huge_project.md","localizedDate":"2024年7月22日","excerpt":"<h1> Python 大型项目开发</h1>\\n<p>有一些 Python 的特性，只有当我们真正开发大型 Python 项目的时候，我们才能意识到他的重要性、意识到他存在的意义，而不是像在小型项目中一样只是炫技或者是玩具，比如“闭包”、“多线程”、”类型限制“等。</p>\\n<h2> 抽象</h2>\\n<p>在 Python 面向对象编程中，静态函数和类函数不是一个概念。</p>\\n<p>静态函数装饰器 <code>staticmethod</code> 和抽象接口装饰器 <code>abstractmethod</code> 不能同时作用于同一个函数，但是类函数装饰器 <code>classmethod</code> 和抽象接口装饰器 <code>abstractmethod</code> 可以作用于同一个函数。</p>","autoDesc":true}');export{t as data};
